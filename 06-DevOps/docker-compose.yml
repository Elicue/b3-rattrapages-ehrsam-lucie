version: "3.9"  # Specifies the Docker Compose file version

services:
    # MySQL Database Service
    mysql:
        image: mysql  # Uses the official MySQL image from Docker Hub
        ports:
            - "3307:3306"  # Maps port 3306 in the container (MySQL default port) to port 3307 on the host
        restart: always  # Ensures the container always restarts if it crashes
        environment:
            MYSQL_ROOT_PASSWORD: root  # Sets the root password for MySQL
            MYSQL_DATABASE: Picard  # Creates a database named "Picard"
        volumes:
            - ./db_dump.sql:/docker-entrypoint-initdb.d/dump.sql  # Mounts a SQL dump file to initialize the database on first run
            - ./dbdata:/var/lib/mysql  # Mounts a directory to persist MySQL data between container restarts

    # Adminer Service
    adminer:
        image: adminer  # Uses the official Adminer image from Docker Hub, a database management tool
        restart: always  # Ensures the container always restarts if it crashes
        ports:
            - "8080:8080"  # Maps port 8080 in the container to port 8080 on the host, allowing access to Adminer through the browser

    # Laravel Application Service
    laravel:
        build:
            context: .  # Sets the build context to the current directory
            dockerfile: Dockerfile  # Uses the specified Dockerfile to build the Laravel image
        volumes:
            - .:/var/www/html  # Mounts the current directory into the container, synchronizing application files
        ports:
            - "8001:80"  # Maps port 80 in the container (web server port) to port 8001 on the host, allowing access to the Laravel app via http://localhost:8001
        env_file:
            - ./.env

        depends_on:
            - mysql  # Ensures that the MySQL container is started before the Laravel container, so the database is ready

# volumes:
#     dbdata:  # This section is commented out but can be used to define named volumes for better volume management
